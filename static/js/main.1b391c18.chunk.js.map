{"version":3,"sources":["Searchbar/Searchbar.js","ImageGalleryItem/ImageGalleryItem.js","ImageGallery/ImageGallery.js","Button/Button.js","Loader/Loader.js","Modal/Modal.js","App.js","index.js"],"names":["Searchbar","state","query","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","images","onOpen","map","id","webformatURL","tags","largeImageURL","src","alt","onClick","ImageGallery","Button","fetchImages","Loader","color","height","width","modalRef","document","querySelector","Modal","handlekeyDown","code","onClose","handleDropClick","target","window","addEventListener","removeEventListener","createPortal","selectedImg","App","currentPage","searchQuery","isLoading","showModal","error","shouldScroll","onChangeQuery","axios","get","then","res","prevState","data","hits","catch","finally","toggleModal","img","handleButton","prevprops","scrollTo","top","documentElement","scrollHeight","behavior","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b391c18.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Searchbar extends Component{\r\n\r\n    state = {\r\n        query: '',\r\n    }\r\n    handleChange = e => {\r\n        this.setState({ query: e.currentTarget.value })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.query)\r\n        this.setState({ query:''})\r\n    }\r\n\r\n  \r\n    render() {\r\n      return (\r\n          <>\r\n              <header className='Searchbar'>\r\n                  <form className='SearchForm' onSubmit={this.handleSubmit}>\r\n                      <button type=\"submit\" className='SearchForm-button'>\r\n                          <span className='SearchForm-button-label'>Search</span>\r\n                      </button>\r\n\r\n                      <input\r\n                          className='SearchForm-input'\r\n                          type=\"text\"\r\n                          autoComplete=\"off\"\r\n                          autoFocus\r\n                          placeholder=\"Search images and photos\"\r\n                          value={this.state.query}\r\n                          onChange={this.handleChange}\r\n                      />\r\n                  </form>\r\n              </header>\r\n          </>\r\n      )\r\n    }\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n}\r\nexport default Searchbar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst ImageGalleryItem = ({ images,onOpen}) => {\r\n   \r\n    \r\n    return (\r\n        <>\r\n            {images.map(({ id, webformatURL, tags, largeImageURL }) => (\r\n                <li className='ImageGalleryItem' key={id} >\r\n                    <img src={webformatURL} alt={tags} onClick={()=>onOpen(largeImageURL)}  className=\"ImageGalleryItem-image\" />\r\n                    \r\n                </li>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\nImageGalleryItem.propTypes = {\r\n    onOpen: PropTypes.func.isRequired,\r\n    images: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ImageGalleryItem;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\r\n\r\n\r\nconst ImageGallery = ({ images,onOpen }) => {\r\n    \r\n    return (\r\n        <>\r\n            <ul className='ImageGallery'>\r\n                <ImageGalleryItem images={images} onOpen={onOpen }  />\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\nImageGallery.propTypes = {\r\n    onOpen: PropTypes.func.isRequired,\r\n    images: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ImageGallery;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({fetchImages }) => {\r\n    \r\n    return (\r\n        <>\r\n           <button className='Button' type='button' onClick={fetchImages}   > Load more</button>\r\n        </>\r\n  )\r\n\r\n}\r\nButton.propTypes = {\r\n  fetchImages: PropTypes.func.isRequired,\r\n}\r\nexport default Button;","import React from 'react';\r\nimport Loading from \"react-loader-spinner\";\r\n\r\n\r\nconst Loader = () => {\r\n    \r\n    return (\r\n        <>\r\n            <Loading\r\n                type=\"Puff\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, {Component} from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nconst modalRef=document.querySelector('#modal-root')\r\n\r\n\r\n\r\n\r\nclass Modal extends Component{\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handlekeyDown)\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('keydown',this.handlekeyDown)\r\n    }\r\n\r\n    handlekeyDown = e => {\r\n        if (e.code === 'Escape') {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    handleDropClick = e => {\r\n        if (e.currentTarget === e.target) {\r\n            this.props.onClose();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n     \r\n        return createPortal(\r\n            \r\n             <div className='Overlay' onClick={this.handleDropClick}>\r\n                <div className='Modal'>\r\n                    <img src={this.props.selectedImg} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        ,modalRef,)\r\n\r\n    }\r\n\r\n}\r\nModal.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    selectedImg: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Modal;\r\n\r\n ","\r\nimport React, { Component } from 'react';\r\nimport Searchbar from './Searchbar/Searchbar'\r\nimport ImageGallery from './ImageGallery/ImageGallery'\r\nimport Button from './Button/Button'\r\nimport axios from 'axios';\r\nimport Loader from \"./Loader/Loader\";\r\nimport Modal from './Modal/Modal'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    images: [],\r\n    currentPage: 1,\r\n    searchQuery: '',\r\n    isLoading: false,\r\n    selectedImg: '',\r\n    showModal: false,\r\n    error: null,\r\n    shouldScroll:false,\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevprops,prevState) {\r\n    if (prevState.searchQuery !== this.state.searchQuery) {\r\n      this.fetchImages();\r\n    }\r\n    if (this.state.shouldScroll) {\r\n      window.scrollTo({\r\n        top: document.documentElement.scrollHeight,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }\r\n    \r\n  onChangeQuery = query => {\r\n    this.setState({searchQuery:query,currentPage: 1,images: []})\r\n    \r\n  }\r\n\r\n  fetchImages = () => {\r\n    const { currentPage, searchQuery } = this.state\r\n    this.setState({ isLoading: true })\r\n    axios\r\n      .get(`https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=20704457-b02886aee8bbd15c3245ed4eb&image_type=photo&orientation=horizontal&per_page=12`)\r\n      .then(res => {\r\n        this.setState(prevState => (\r\n          {\r\n            images: [...prevState.images, ...res.data.hits],\r\n            currentPage: prevState.currentPage + 1,\r\n          }))\r\n      }).catch(error => this.setState({ error })).finally(() => this.setState({ isLoading: false }))\r\n  }\r\n\r\n  toggleModal = img => {\r\n    this.setState(state => ({\r\n      selectedImg: !state.showModal ? img : '',\r\n      showModal: !state.showModal,\r\n    }))\r\n  }\r\n  handleButton = () => {\r\n    this.fetchImages();\r\n    if (this.state.currentPage > 1) {\r\n      this.setState({ shouldScroll: true })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { images,isLoading,showModal,selectedImg,error } = this.state;\r\n    return (\r\n      <div>\r\n        {showModal && <Modal selectedImg={selectedImg} onClose={this.toggleModal} />}\r\n        <Searchbar onSubmit={this.onChangeQuery} />\r\n        {error && <h1 className=\"Error\">Error, please try later</h1>}\r\n        {isLoading && <Loader />}\r\n        <ImageGallery images={images} onOpen={this.toggleModal}  />\r\n        {images.length > 0 && !isLoading && <Button   fetchImages={this.handleButton}/>}\r\n        \r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './style.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}